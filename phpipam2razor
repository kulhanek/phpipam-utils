#!/usr/bin/env php
<?php
// -----------------------------------------------------------------------------
// Usage: $ ./phpipam2razor <subnet>
//
// Example:
//        $ ./phpipam2razor 147.251.90.0/24 > nodes
// -----------------------------------------------------------------------------

printf("\n");

// subnet is the first argument
if( count($argv) != 2 ){
    printf(">>> ERROR: Subnet not specified!\n\n");
    exit(1);
}

$subnet = $argv[1];
if( $subnet == "" ) {
    printf(">>> ERROR: Subnet not specified!\n\n");
    exit(1);
}

// access to phpIPAM api
include 'phpipam.conf';

// -----------------------------------------------------------------------------

$subnetid = 0;
$data = [];
$token = "";
$hosts = "";
$subnet_data = "";
$dhcp_classes = [];
$locationsdb = [];

// -----------------------------------------------------------------------------

// stop on any warning
// https://stackoverflow.com/questions/10520390/stop-script-execution-upon-notice-warning

function errHandle($errNo, $errStr, $errFile, $errLine) {
    $msg = "$errStr in $errFile on line $errLine";
    if ($errNo == E_NOTICE || $errNo == E_WARNING) {
        throw new ErrorException($msg, $errNo);
    } else {
        echo $msg;
    }
}

set_error_handler('errHandle');

// -----------------------------------------------------------------------------

function init_session()
{   
    global $url, $username, $passwd, $token;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "user/");
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_USERPWD, "$username:$passwd");
    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $json = json_decode($server_output);
    
    $token = $json->data->token;
    
    //printf("Session token: %s\n",$token);
}

// -----------------------------------------------------------------------------

function get_subnetid()
{   
    global $url, $token, $subnetid, $subnet;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "subnets/cidr/" . $subnet ."/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $subnet_data = json_decode($server_output);
    
    if( $subnet_data->success == false ){
        printf(">>> ERROR: Unable to get subnet id for %s\n\n",$subnet);
        var_dump($subnet_data); 
        exit(1);
    }   
        
    $subnetid = $subnet_data->data[0]->id;
}

// -----------------------------------------------------------------------------

function get_subnet()
{   
    global $url, $token, $subnetid, $subnet, $subnet_data;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "subnets/" . $subnetid ."/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $subnet_data = json_decode($server_output);
        
    if( $subnet_data->success == false ){
        printf(">>> ERROR: Unable to get hosts for %s\n\n",$subnet);
        var_dump($subnet_data); 
        exit(1);
    } 
}

// -----------------------------------------------------------------------------

function get_vlan()
{   
    global $url, $token, $subnet_data, $subnet, $vlan_data;
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "vlans/" . $subnet_data->data->vlanId ."/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $vlan_data = json_decode($server_output);
        
    if( $vlan_data->success == false ){
        printf(">>> ERROR: Unable to get hosts for %s\n\n",$subnet);
        var_dump($vlan_data); 
        exit(1);
    } 
}

// -----------------------------------------------------------------------------

function get_hosts()
{   
    global $url, $token, $subnetid, $subnet, $hosts;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "subnets/" . $subnetid ."/addresses/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $hosts = json_decode($server_output);
        
    if( $hosts->success == false ){
        printf(">>> ERROR: Unable to get hosts for %s\n\n",$subnet);
        var_dump($hosts); 
        exit(1);
    } 
    
}

// -----------------------------------------------------------------------------

function get_location_name($id)
{   
    global $url, $token, $subnet, $locationsdb;

    // is it in cache?
    if( array_key_exists($id, $locationsdb) == true ){
        return($locationsdb[$id]);
    }
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "tools/locations/" . $id . "/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $loc_data = json_decode($server_output);
        
    if( $loc_data->success == false ){
        printf(">>> ERROR: Unable to get hosts for %s\n\n",$subnet);
        var_dump($loc_data); 
        exit(1);
    } 
    
    $name = $loc_data->data->name;
    $locationsdb[$id] = $name;
    return($name);
}

// -----------------------------------------------------------------------------

function generate_header()
{
    global $url, $subnet_data, $subnet, $vlan_data;

    // THERE MUST BE AN EMPTY SPACE BEFORE A COMMENT (#)
    
    printf("  # -----------------------------------------------------------------------------\n");
    printf("  # GENERATED BY phpipam2razor - DO NOT EDIT\n");
    printf("  # -----------------------------------------------------------------------------\n"); 
    printf("  # data source: %s\n",$url);    
    printf("  # date       : %s\n",date("Y-m-d H:i:s"));  
    printf("  # admin      : %s\n",$subnet_data->data->custom_Admin);
    printf("  # -----------------------------------------------------------------------------\n");    
    printf("\n");
    printf("  # subnet: %s\n",$subnet);
    printf("  # vlan  : %d (%s)\n",$vlan_data->data->number, $vlan_data->data->name);
    printf("  # -----------------------------------------------------------------------------\n");      
}

// -----------------------------------------------------------------------------

function generate_group()
{
    global $hosts;
        
    foreach($hosts->data as $item){
        if( ( $item->ip == "" ) || ( $item->hostname == "" ) || ( $item->mac == "" ) || ( $item->custom_Razor == "" ) ) continue;
        printf("\n");        
        printf("  # --\n");
        printf("  # Admin     : %s\n",$item->custom_Admin);
        if( $item->custom_User != "" ){
        printf("  # User      : %s\n",$item->custom_User); 
        }
        printf("  # Group     : %s\n",$item->custom_Group);
        if( $item->custom_Cluster != "" ){        
        printf("  # Cluster   : %s\n",$item->custom_Cluster);
        }
        if( $item->location > 0 ){
        printf("  # Location  : %s\n",get_location_name($item->location));
        }
        if( $item->port != "" ){
        printf("  # Plug/port : %s\n",$item->port);
        }        
        printf("%s %s %s\n",$item->hostname,$item->mac,$item->custom_Razor);
    }

    printf("\n");
    
}

// -----------------------------------------------------------------------------

init_session();
get_subnetid();
get_subnet();
get_vlan();
get_hosts();
generate_header();
generate_group();

?>
