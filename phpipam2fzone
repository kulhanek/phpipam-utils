#!/usr/bin/env php
<?php
// -----------------------------------------------------------------------------
// Usage: $ ./phpipam2fzone [--no-header] <subnet> [<subnet> ...]
//
// Example:
//        $ ./phpipam2fzone 147.251.90.0/24
//
// Output file:
//        db.ncbr.muni.cz
// -----------------------------------------------------------------------------

printf("\n");

$arg_start=1;
$nargs = $argc;
$print_header = true;

if( $nargs > 1 ){
    if( $argv[1] == "--no-header" ){
        $arg_start=2;
        $nargs--;
        $print_header = false;
    }
}

if( $nargs == 1 ){
    printf(">>> ERROR: No subnet specified!\n\n");
    exit(1);
} 

$subnet = $argv[$arg_start];
if( $subnet == "" ) {
    printf(">>> ERROR: Master subnet not specified!\n\n");
    exit(1);
}

printf("Master subnet: %s\n",$subnet);

// access to phpIPAM api
include 'phpipam.conf';

// -----------------------------------------------------------------------------

$subnetid = 0;
$data = [];
$token = "";
$hosts = "";
$subnet_data = "";
$dhcp_classes = [];
$locationsdb = [];
$devsdb = [];

// -----------------------------------------------------------------------------

// stop on any warning
// https://stackoverflow.com/questions/10520390/stop-script-execution-upon-notice-warning

function errHandle($errNo, $errStr, $errFile, $errLine) {
    $msg = "$errStr in $errFile on line $errLine";
    if ($errNo == E_NOTICE || $errNo == E_WARNING) {
        throw new ErrorException($msg, $errNo);
    } else {
        echo $msg;
    }
}

set_error_handler('errHandle');

// -----------------------------------------------------------------------------

function init_session()
{   
    global $url, $username, $passwd, $token;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "user/");
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_USERPWD, "$username:$passwd");
    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $json = json_decode($server_output);
    
    $token = $json->data->token;
    
    //printf("Session token: %s\n",$token);
}

// -----------------------------------------------------------------------------

function get_subnetid()
{   
    global $url, $token, $subnetid, $subnet;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "subnets/cidr/" . $subnet ."/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $subnet_data = json_decode($server_output);
    
    if( $subnet_data->success == false ){
        printf("\n>>> ERROR: Unable to get subnet id for %s!\n\n",$subnet);
        var_dump($subnet_data); 
        exit(1);
    }   
        
    $subnetid = $subnet_data->data[0]->id;
}

// -----------------------------------------------------------------------------

function get_subnet()
{   
    global $url, $token, $subnetid, $subnet, $subnet_data;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "subnets/" . $subnetid ."/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $subnet_data = json_decode($server_output);
        
    if( $subnet_data->success == false ){
        printf(">>> ERROR: Unable to get subnet info for %s\n\n",$subnet);
        var_dump($subnet_data); 
        exit(1);
    }

}

// -----------------------------------------------------------------------------

function get_vlan()
{   
    global $url, $token, $subnet_data, $subnet, $vlan_data;
   
    if( $subnet_data->data->vlanId == 0 ){
        printf("\n>>> ERROR: No VLAN defined for %s subnet!\n\n",$subnet);
        exit(1);
    }
 
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "vlans/" . $subnet_data->data->vlanId ."/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $vlan_data = json_decode($server_output);
        
    if( $vlan_data->success == false ){
        printf(">>> ERROR: Unable to get vlan for %s\n\n",$subnet);
        var_dump($vlan_data); 
        exit(1);
    } 
}

// -----------------------------------------------------------------------------

function get_hosts()
{   
    global $url, $token, $subnetid, $subnet, $hosts;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "subnets/" . $subnetid ."/addresses/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $hosts = json_decode($server_output);
        
    if( $hosts->success == false ){
        printf(">>> ERROR: Unable to get hosts for %s\n\n",$subnet);
        var_dump($hosts); 
        exit(1);
    } 
    
}

// -----------------------------------------------------------------------------

function get_location_name($id)
{   
    global $url, $token, $locationsdb;

    // is it in cache?
    if( array_key_exists($id, $locationsdb) == true ){
        return($locationsdb[$id]);
    }
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "tools/locations/" . $id . "/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $loc_data = json_decode($server_output);
        
    if( $loc_data->success == false ){
        printf(">>> ERROR: Unable to get location for %d\n\n",$id);
        var_dump($loc_data); 
        exit(1);
    } 
    
    $name = $loc_data->data->name;
    $locationsdb[$id] = $name;
    return($name);
}

// -----------------------------------------------------------------------------

function get_device_name($id)
{ 
    if( $id == 0 ) return("");

    global $url, $token, $subnet, $devsdb;

    // is it in cache?
    if( array_key_exists($id, $devsdb) == true ){
        return($devsdb[$id]);
    }

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "devices/" . $id . "/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $headers = [
        "token: $token"
    ];

    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $server_output = curl_exec ($ch);

    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }

    curl_close ($ch);

    $dev_data = json_decode($server_output);

    if( $dev_data->success == false ){
        printf(">>> ERROR: Unable to get device %d\n\n",$id);
        var_dump($dev_data);
        exit(1);
    }

    $name = sprintf("%s (%s)",$dev_data->data->hostname,str_replace("\r",'',str_replace("\n", ' ', $dev_data->data->description)));
    $devsdb[$id] = $name;
    return($name);
}

// -----------------------------------------------------------------------------

function print_header()
{          
    printf("\n");          
    printf("ST   Id           IP               HostName              \n");          
    printf("-- ------ ------------------ --------------------------- \n");
}

// -----------------------------------------------------------------------------

function print_data()
{
    global $hosts, $dhcp_classes;

    print_header();
    
    foreach($hosts->data as $item){
        if( ( $item->ip != "" ) && ( $item->hostname != "" ) ){
            printf("%2s % 5d | %-16s | %-25s \n",'',$item->id,$item->ip,$item->hostname);
        }
    }
    
    printf("\n");  
}

// -----------------------------------------------------------------------------

function generate_header($fh)
{
    global $url, $subnet_data, $subnet, $vlan_data, $dns_domain ;
    
    fprintf($fh,"; -----------------------------------------------------------------------------\n");
    fprintf($fh,"; GENERATED BY phpipam2fzone - DO NOT EDIT\n");
    fprintf($fh,"; -----------------------------------------------------------------------------\n"); 
    fprintf($fh,"; data source: %s\n",$url);    
    fprintf($fh,"; date       : %s\n",date("Y-m-d H:i:s"));  
    fprintf($fh,"; subnet     : %s\n",$subnet);
    fprintf($fh,"; admin      : %s\n",$subnet_data->data->custom_Admin);
    fprintf($fh,"; tech admin : %s\n",$subnet_data->data->custom_TechAdmin);
    if( $subnet_data->data->custom_SecAlerts != "" ){
    fprintf($fh,"; sec-alerts : %s\n",$subnet_data->data->custom_SecAlerts);
    }
    fprintf($fh,"; -----------------------------------------------------------------------------\n");    
    fprintf($fh,";\n");
    fprintf($fh,"; domain: %s\n",$dns_domain);
    fprintf($fh,"; -----------------------------------------------------------------------------\n");      

    $ns_list = explode(",",$subnet_data->data->custom_NS);
    if( (count($ns_list) < 1) || ($ns_list[0] == "") ){
        printf(">>> ERROR: NS record is not set for subnet!\n\n");
        exit(1);
    }

    fprintf($fh,"\n");
    fprintf($fh,"\$ORIGIN %s.\n",$dns_domain);
    fprintf($fh,"\$TTL 86400\n");
    fprintf($fh,"@   IN  SOA %s.   %s. (\n",$ns_list[0],str_replace("@",".",$subnet_data->data->custom_TechAdmin));
    fprintf($fh,"            %s ; serial\n",date("ymdHi"));
    fprintf($fh,"            21600      ; refresh after 6 hours\n");
    fprintf($fh,"            3600       ; retry after 1 hour\n");
    fprintf($fh,"            604800     ; expire after 1 week\n");
    fprintf($fh,"            86400 )    ; minimum TTL of 1 day\n");

    fprintf($fh,"\n");
    fprintf($fh,"; zone setup\n");
    foreach($ns_list as $ns){
        fprintf($fh,"    IN  NS  %s.\n",$ns);
    }

    $mx_list = explode(",",$subnet_data->data->custom_MX);
    foreach($mx_list as $mx){
        fprintf($fh,"    IN  MX  %s.\n",$mx);
    }

}

// -----------------------------------------------------------------------------

function generate_group($fh)
{
    global $hosts, $dns_domain, $subnet, $vlan_data, $subnet_data, $print_header;

    fprintf($fh,"\n");
    if( ! $print_header ){
    fprintf($fh,"; domain     : %s\n",$subnet_data->data->custom_Domain);
    }
    fprintf($fh,"; subnet     : %s\n",$subnet);
    fprintf($fh,"; vlan       : %d (%s)\n",$vlan_data->data->number, $vlan_data->data->name);
    fprintf($fh,"; admin      : %s\n",$subnet_data->data->custom_Admin);
    fprintf($fh,"; tech admin : %s\n",$subnet_data->data->custom_TechAdmin);
    fprintf($fh,"; sec-alerts : %s\n",$subnet_data->data->custom_SecAlerts);
    fprintf($fh,"; -----------------------------------------------------------------------------\n");
     
    $mx_list = explode(",",$subnet_data->data->custom_MX);
  
    foreach($hosts->data as $item){
        if( ( $item->ip == "" ) || ( $item->hostname == "" ) ) continue;
        # process only records from domain
        if( ! (strpos($item->hostname, $dns_domain) !== false) ) continue;

        fprintf($fh,"\n"); 
        $hn_items = explode(".", $item->hostname);      
        fprintf($fh,"%-30s  IN  A  %s\n",$hn_items[0],$item->ip);

        if( $item->location > 0 ){
        fprintf($fh,"  ; Location:  %s\n",get_location_name($item->location));
        }
        if( $item->port != "" ){
        fprintf($fh,"  ; Plug/port: %s\n",$item->port);
        }
        if( $item->deviceId != 0 ){
            $devstr = get_device_name($item->deviceId);
        fprintf($fh,"  ; Device:    %s\n",$devstr);
        } 
        if( ($item->custom_Admin != "User") && ($item->custom_Admin != "") ){
        fprintf($fh,"  ; Admin:     %s\n",$item->custom_Admin);
        if( $item->custom_User != "" ){
        fprintf($fh,"  ; User:      %s\n",$item->custom_User);
        } 
        } else {
        if( $item->custom_User != "" ){
        fprintf($fh,"  ; User and admin: %s\n",$item->custom_User);
        }
        }
        if( $item->custom_Group != "" ){
        fprintf($fh,"  ; Group:     %s\n",$item->custom_Group);
        }
        if( $item->custom_Cluster != "" ){        
        fprintf($fh,"  ; Cluster:   %s\n",$item->custom_Cluster);
        }
        if( $item->custom_OS != "" ){      
        fprintf($fh,"  ; OS:        %s\n",$item->custom_OS);
        }
        if( $item->custom_AssetNo != "" ){ 
        fprintf($fh,"  ; Asset no:  %s\n",$item->custom_AssetNo);
        }
    }
    
    fprintf($fh,"\n");   
}

// -----------------------------------------------------------------------------

init_session();
get_subnetid();
get_subnet();

$dns_domain = $subnet_data->data->custom_Domain;

$fzone_conf = sprintf("db.%s",$dns_domain);

if( $print_header ){
    printf("\n");
    printf("Generating forward zone configuration: %s\n",$fzone_conf);
    $fh = fopen($fzone_conf,"w");
    if( $fh == false ){
        printf(">>> ERROR: Unable to open %s for writing!\n\n",$fzone_conf);
        exit(1);
    }

    generate_header($fh);
}

for($i=$arg_start;$i<$argc;$i++){
    $subnet = $argv[$i];
    if( $subnet == "" ) {
        printf(">>> ERROR: Child subnet not specified!\n\n");
        exit(1);
    }
    get_subnetid();
    get_subnet();
    get_vlan();
    if( ! $print_header ){
        $fzone_conf_vlan = sprintf("db.%s.vlan%d",$dns_domain,$vlan_data->data->number);
        printf("\n");
        printf("Generating forward zone configuration: %s\n",$fzone_conf_vlan);
        $fh = fopen($fzone_conf_vlan,"w");
        if( $fh == false ){
            printf(">>> ERROR: Unable to open %s for writing!\n\n",$fzone_conf);
            exit(1);
        }
    }
    get_hosts();
    print_data();
    if( $subnet_data->data->custom_Domain != $dns_domain ){
        printf(">>> ERROR: Subnet %s is from different domain ('%s' is not '%s')!\n\n",$subnet,$subnet_data->data->custom_Domain,$dns_domain);
        exit(1);
    }
    generate_group($fh);
    if( ! $print_header ){
        fclose($fh);
    }
}

if( $print_header ){
    fclose($fh);
}

printf("Done!\n");
printf("\n");   

?>
