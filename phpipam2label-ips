#!/usr/bin/env php
<?php
$arguments = getopt("s:n:v:f:r:h");

if(array_key_exists("h",$arguments))
{
echo "Program to print ipam data to pdf file \n
arguments: [-s][-n][-f][-v][-h] 
compulsory:
    -s name of subnet
optional(one or two them- if none of them specified all subnet will be printed):
	-f field- use only with value. Pick any default or custom field by which you want to choose key
    -v value- use only with field. Specify 
    -n name of machine (for more machine: divided by spaces and put into quotes, result is <subnet_selected.pdf>)
    -s resize header and name of machine (default value is 1- no resize. Useful for long names of machines)
help:    
    -h (print this help and exit)
program uses tFPDF edited library (tfpdf.php file and font folder) 
    ./ipam2pdf -s 147.251.90.0/24 -f custom_Cluster -v ROBOX () // get labels by custom_Cluster and pick all computers from cluster ROBOX
    ./ipam2pdf -s 147.251.90.0/24 // get all labels from this subnet
    ./ipam2pdf -s 147.251.90.0/24 -n 'pes.ncbr.muni.cz fes.ncbr.muni.cz' // get labels for machines pes.ncbr.muni.cz and fes.ncbr.muni.cz \n"; 
exit(0);
}
if(array_key_exists("s",$arguments) == FALSE)
{
    echo "\n>>> ERROR Subnet not specified \n\n";
	exit(1);
}
$subnet = $arguments["s"];


//--------------------------------------------------------------------------
require('./extras/tfpdf_lib/tfpdf.php');
//require('./extras/tfpdf_lib/cells_bold.php');
include 'phpipam.conf';
// -----------------------------------------------------------------------------

$paper_width=210;
$paper_height = 297;
$subnetid = 0;
$data = [];
$token = "";
$hosts = "";
$subnet_data = "";
$dhcp_classes = [];
$locationsdb = [];
$devsdb = [];
$new_page_checker = 1;
$cell_width = 95;
$cell_width_half = $cell_width/2;
$cell_header_height = 21.375;
$cell_height = 7.14;
$font_size = 10;
$header_size = 42;
if(array_key_exists("r",$arguments) == TRUE)
    {
    $header_name_size_scale = $arguments["r"];
    }
else
    {
    $header_name_size_scale = 1.0;
    }
$bottom_break = 12.7;
$report_to = "Any changes need to be reported to support@lcc.ncbr.muni.cz";
// -----------------------------------------------------------------------------

// stop on any warning
// https://stackoverflow.com/questions/10520390/stop-script-execution-upon-notice-warning

function errHandle($errNo, $errStr, $errFile, $errLine) {
    $msg = "$errStr in $errFile on line $errLine";
    if ($errNo == E_NOTICE || $errNo == E_WARNING) {
        throw new ErrorException($msg, $errNo);
    } else {
        echo $msg;
    }
}

set_error_handler('errHandle');

// -----------------------------------------------------------------------------

function init_session()
{   
    global $url, $username, $passwd, $token;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "user/");
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_USERPWD, "$username:$passwd");
    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $json = json_decode($server_output);

    $token = $json->data->token;
    
}

// -----------------------------------------------------------------------------

function get_subnetid()
{   
    global $url, $token, $subnetid, $subnet;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "subnets/cidr/" . $subnet ."/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $subnet_data = json_decode($server_output);
    
    if( $subnet_data->success == false ){
        printf(">>> ERROR: Unable to get subnet id for %s\n\n",$subnet);
        var_dump($subnet_data); 
        exit(1);
    }   
        
    $subnetid = $subnet_data->data[0]->id;
}

// -----------------------------------------------------------------------------

function get_subnet()
{   
    global $url, $token, $subnetid, $subnet, $subnet_data;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "subnets/" . $subnetid ."/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $subnet_data = json_decode($server_output);
    //var_dump($subnet_data); 
    if( $subnet_data->success == false ){
        printf(">>> ERROR: Unable to get hosts for %s\n\n",$subnet);
        var_dump($subnet_data); 
        exit(1);
    } 
}

// -----------------------------------------------------------------------------

function get_location_name($id)
{   
    global $url, $token, $locationsdb;

    // is it in cache?
    if( array_key_exists($id, $locationsdb) == true ){
        return($locationsdb[$id]);
    }
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "tools/locations/" . $id . "/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $loc_data = json_decode($server_output);
        
    if( $loc_data->success == false ){
        printf(">>> ERROR: Unable to get location for %d\n\n",$id);
        var_dump($loc_data); 
        exit(1);
    } 
    
    $name = $loc_data->data->name;
    $locationsdb[$id] = $name;
    return($name);
}

// -----------------------------------------------------------------------------
class PDF extends tFPDF
{

function checkForEOL($table_size)
{
    global $paper_height, $new_page_checker;
    $y = $this->GetY();
	if(($y + $table_size + 21) > $paper_height) 
	{
	    $this->AddPage();
        $new_page_checker = 1;
	}
}

function checkCluster($dhcp_dec, $index)
{   
    global $font_size, $cell_height,$cust_adm, $table, $cell_width, $cell_width_half;
    if ($dhcp_dec["data"][$index]["custom_Admin"] == "User")
    {
    $cust_adm = $dhcp_dec["data"][$index]["custom_User"];
    }
    else
    {
    $cust_adm = $dhcp_dec["data"][$index]["custom_Admin"];
    }
    $this->SetFont('DejaVu','',$font_size);
    if($dhcp_dec["data"][$index]["custom_Cluster"] == "")
    {
        $this->Cell($cell_width,$cell_height,"Admin: ".$cust_adm, $ln=1, $border=1, $align='C');
    }
    else
    {
        $this->Cell($cell_width*(6.0/9.0),$cell_height,"Admin: ".$cust_adm, $border=1, $align='C');
        $this->Cell($cell_width*(3.0/9.0),$cell_height,"Cluster: ".$dhcp_dec["data"][$index]["custom_Cluster"], $ln=1,$border=1,$align='C');
    }
}

function drawTable($dhcp_dec, $data, $index)
/* draw table on left side */
{
	global $font_size, $header_size, $a, $cust_adm, $location, $y_after, $new_page_checker, $cell_width, $cell_width_half, $cell_header_height, $cell_height, $report_to, $header_name_size_scale;
    $this->SetLeftMargin(5);
    if ($dhcp_dec["data"][$index]["location"] > 0)
    //if (is_null($dhcp_dec["data"][$index]["location"]) == FALSE)
    {
        $location = get_location_name($dhcp_dec["data"][$index]["location"]);
    }
    else
    {
        $location = "";
    }
	$data = 'data';
    if($new_page_checker == 1)
    {
        $this->SetY(1.5, false);
    }
    //else
    //{
    //    $this->Ln(13.6);
    //}
    $this->SetLineWidth(0.3);
	$a = $this->GetY();
    $this->SetLeftMargin(5);
	$this->SetFont('Arial','B',$header_size * $header_name_size_scale);
    $this->Cell($cell_width,$cell_header_height,explode(".",$dhcp_dec["data"][$index]["hostname"])[0],$ln=1,$border=1,$align='C');
	$this->SetFont('DejaVu','',$font_size);
    $this->Cell($cell_width_half,$cell_height,$dhcp_dec["data"][$index]["ip"],$border=1,$align='C');
    $this->SetFont('DejaVu','',$font_size*$header_name_size_scale);
    $this->Cell($cell_width_half,$cell_height,$dhcp_dec["data"][$index]["hostname"],$ln=1,$border=1,$align='C');
    $this->SetFont('DejaVu','',$font_size);
	$this->checkCluster($dhcp_dec, $index);
    $this->Cell($cell_width_half,$cell_height,"Group: ".$dhcp_dec["data"][$index]["custom_Group"],$border=1,$align='C');
    $this->Cell($cell_width_half,$cell_height,"DHCP: ".$dhcp_dec["data"][$index]["custom_DHCP"],$ln=1,$border=1,$align='C');
	$this->SetFont('DejaVu','',($font_size*4)/5);
    $this->Cell($cell_width_half,$cell_height,"MAC address: ".$dhcp_dec["data"][$index]["mac"],$border=1,$align='C');
	$this->SetFont('DejaVu','',$font_size);
    $this->Cell($cell_width_half,$cell_height,"Asset number: ".$dhcp_dec["data"][$index]["custom_AssetNo"],$ln=1,$border=1,$align='L');
    $this->Cell($cell_width_half,$cell_height,"Plug: ".$dhcp_dec["data"][$index]["port"],$border=1,$align='C');
    $this->Cell($cell_width_half,$cell_height,"Location: ".$location,$ln=1,$border=1,$align='C');
    //$this->Cell(90,6,"Changes need to be reported to: ".$dhcp_dec["data"][$index]["custom_Admin"],$border=1,$align='C');
    $this->SetFont('DejaVu','',8);
    $this->MultiCell($cell_width,$cell_height,$report_to,$border=1,$align='C');
    //$cust_adm = NULL;
    $new_page_checker = 0;
	return;
    
}


function drawTable_r($dhcp_dec, $data, $index, $page_width, $paper_height)
/* draw table on right site */
{     	
	global $font_size, $header_size, $a, $cust_adm, $location,$cell_width, $cell_width_half, $cell_header_height, $cell_height, $bottom_break, $report_to, $header_name_size_scale;
    $y_before = $this->GetY();
    if ($dhcp_dec["data"][$index]["location"] > 0)
    //if (is_null($dhcp_dec["data"][$index]["location"]) == FALSE)
    {
        $location = get_location_name($dhcp_dec["data"][$index]["location"]);
    }
    else
    {
        $location = "";
    }
    $this->SetLineWidth(0.3);
    $indent = 5;
	$data = 'data';
    $this->SetAutoPageBreak(true,0.05);
	$this->SetY($a);
	$this->SetFont('Arial','B',$header_size * $header_name_size_scale);
	$this->SetX($page_width/2 + $indent);
    $this->Cell($cell_width,$cell_header_height,explode(".",$dhcp_dec["data"][$index]["hostname"])[0],$ln=1,$border=1,$align='C');
	$this->SetFont('DejaVu','',$font_size);
	$this->SetX($page_width/2 + $indent);
    $this->Cell($cell_width_half,$cell_height,$dhcp_dec["data"][$index]["ip"],$border=1,$align='C');
    $this->SetFont('DejaVu','',$font_size * $header_name_size_scale);
    $this->Cell($cell_width_half,$cell_height,$dhcp_dec["data"][$index]["hostname"],$ln=1,$border=1,$align='C');
    $this->SetFont('DejaVu','',$font_size);
	$this->SetX($page_width/2 + $indent);
    $this->checkCluster($dhcp_dec, $index);
	$this->SetX($page_width/2 + $indent);
    $this->Cell($cell_width_half,$cell_height,"Group: ".$dhcp_dec["data"][$index]["custom_Group"],$border=1,$align='C');
    $this->Cell($cell_width_half,$cell_height,"DHCP: ".$dhcp_dec["data"][$index]["custom_DHCP"],$ln=1,$border=1,$align='C');
	$this->SetX($page_width/2 + $indent);
	$this->SetFont('DejaVu','',($font_size*4)/5);
    $this->Cell($cell_width_half,$cell_height,"MAC address: ".$dhcp_dec["data"][$index]["mac"],$border=1,$align='C');
	$this->SetFont('DejaVu','',$font_size);
    $this->Cell($cell_width_half,$cell_height,"Asset number: ".$dhcp_dec["data"][$index]["custom_AssetNo"],$ln=1,$border=1,$align='L');
	$this->SetX($page_width/2 + $indent);
    $this->Cell($cell_width_half,$cell_height,"Plug: ".$dhcp_dec["data"][$index]["port"],$border=1,$align='C');
    $this->Cell($cell_width_half, $cell_height,"Location: ".$location,$ln=1,$border=1,$align='C');
	$this->SetX($page_width/2 + $indent);
    $this->SetFont('DejaVu','',8);
    $this->MultiCell($cell_width, $cell_height,$report_to,$border=1,$align='C');
    $cust_adm = NULL;
    $this->Ln($bottom_break);
    //if(isset($cust_adm) == FALSE)
    //{
    //    $this->Ln();
    //}
    $y_after = $this->GetY();
    $table_size = $y_after - $y_before;
	$this->checkForEOL($table_size);
	return;
    
}

}
// -----------------------------------------------------------------------------

function get_hosts()
{   
    global $url, $token, $subnetid, $subnet, $hosts, $hosts_ass_array;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "subnets/" . $subnetid ."/addresses/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $hosts_ass_array = json_decode($server_output, $assoc = TRUE);
    $hosts = json_decode($server_output); 

    if( $hosts->success == false ){
        printf(">>> ERROR: Unable to get hosts for %s\n\n",$subnet);
        //var_dump($hosts); 
        exit(1);
    } 
    $hosts = json_decode($server_output, $assoc = TRUE); 
    return $hosts;
    
}
//------------------------------------------------------------------------------
function drawTables($hosts_to_print, $paper_width, $paper_height, $x, $pdf, $c)
{   
	if($c % 2 == 0)
	{
        //$pdf->Ln(13);
        $pdf->drawTable($hosts_to_print,"data",$x,$paper_width);
	}
	else
	{
	    $pdf->drawTable_r($hosts_to_print,"data",$x,$paper_width, $paper_height);
    }
}

// -----------------------------------------------------------------------------

init_session();
get_subnetid();
get_subnet();
$hosts_to_print = get_hosts();

//var_dump($hosts_to_print);

$pdf = new PDF('P','mm',array(210,297));
$pdf->AddPage();
//$pdf->SetFont('Arial','B',16);
$pdf->AddFont('DejaVu','','DejaVuSansCondensed.ttf',true);
$pdf->SetFont('DejaVu','',14);
$c = 0;

//get all subnet machines label
if(array_key_exists("n",$arguments) == FALSE and array_key_exists("f",$arguments) == FALSE and array_key_exists("v",$arguments) == FALSE)
{   
    for($x = 0; $x < count($hosts_to_print["data"]); $x++) 
    {
    drawTables($hosts_to_print, $paper_width, $paper_height, $x, $pdf, $c);
    $c++;
    }
    $pdf->Output(explode("/",$arguments["s"])[0].'.pdf');
    exit(0);
}

if(array_key_exists("n",$arguments) == TRUE and (array_key_exists("f",$arguments) == TRUE or array_key_exists("v",$arguments) == TRUE))
{
    exit(">>> ERROR: Insert either field or required individual names \n \n");
}

// get machines label by name
if(array_key_exists("n",$arguments) == TRUE and array_key_exists("f",$arguments) == FALSE and array_key_exists("v",$arguments) == FALSE)
{ 
    $names = explode(" ",$arguments["n"]);
    for($x = 0; $x < count($hosts_to_print["data"]); $x++)
        {
        for($y = 0; $y < count($names); $y++)
            {
            if($names[$y] == $hosts_to_print["data"][$x]["hostname"])
                {
                drawTables($hosts_to_print, $paper_width, $paper_height, $x, $pdf, $c);
                $c++;
                }
            }
        }
    $pdf->Output(explode("/",$arguments["s"])[0].'_selected.pdf');
    exit(0);
}
//get machines label by specified field
if(array_key_exists("f",$arguments) == TRUE and array_key_exists("v",$arguments) == TRUE and array_key_exists("n",$arguments) == FALSE)
{ 
    $field = $arguments["f"];
	$value = $arguments["v"];
    for($x = 0; $x < count($hosts_to_print["data"]); $x++)
        {
            if($value == $hosts_to_print["data"][$x][$field])
                {
                drawTables($hosts_to_print, $paper_width, $paper_height, $x, $pdf, $c);
                $c++;
                }
        }
        
    $pdf->Output(explode("/",$arguments["s"])[0].'_'.$field.'_'.$value.'.pdf');
    exit(0);
}
else
{
exit(">>> ERROR: Field or value not specified\n\n");
}

?>
