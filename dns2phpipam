#!/usr/bin/env php
<?php
// -----------------------------------------------------------------------------
// Usage: $ ./dns2phpipam [-test] <subnet>
//
// Example:
//        $ ./dns2phpipam -test 147.251.90.0/24
//        $ ./dns2phpipam 147.251.90.0/24
// -----------------------------------------------------------------------------

printf("\n");

// subnet is the first argument
if( (count($argv) != 2) && (count($argv) != 3) ){
    printf(">>> ERROR: Subnet not specified!\n\n");
    exit(1);
}

if( $argv[1] == "-test" ){
    $subnet = $argv[2];
    if( $subnet == "" ) {
        printf(">>> ERROR: Subnet not specified!\n\n");
        exit(1);
    }
    $testmode = true;
    printf("SubNet: %s\n",$subnet);
    printf("Test  : ON\n");    
} else {
    $subnet = $argv[1];
    if( $subnet == "" ) {
        printf(">>> ERROR: Subnet not specified!\n\n");
        exit(1);
    }
    $testmode = false;    
    printf("SubNet: %s\n",$subnet);
    printf("Test  : OFF - changes will be commited to IPAM\n");
}

// access to phpIPAM api
include 'phpipam.conf';

// -----------------------------------------------------------------------------

$subnetid = 0;
$data = [];
$token = "";
$hosts = "";
$min_host = "";
$max_host = "";

// -----------------------------------------------------------------------------

function init_session()
{   
    global $url, $username, $passwd, $token;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "user/");
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_USERPWD, "$username:$passwd");
    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $json = json_decode($server_output);
    
    $token = $json->data->token;
    
    //printf("Session token: %s\n",$token);
}

// -----------------------------------------------------------------------------

function get_subnetid()
{   
    global $url, $token, $subnetid, $subnet;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "subnets/cidr/" . $subnet ."/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $subnet_data = json_decode($server_output);
    
    if( $subnet_data->success == false ){
        printf(">>> ERROR: Unable to get subnet id for %s\n\n",$subnet);
        var_dump($subnet_data); 
        exit(1);
    }   
        
    $subnetid = $subnet_data->data[0]->id;
}

// -----------------------------------------------------------------------------

function get_subnetrange()
{   
    global $url, $token, $subnetid, $subnet, $min_host, $max_host;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "subnets/" . $subnetid ."/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $subnet_data = json_decode($server_output);
        
    if( $subnet_data->success == false ){
        printf(">>> ERROR: Unable to get hosts for %s\n\n",$subnet);
        var_dump($subnet_data); 
        exit(1);
    } 
    
    $min_host = $subnet_data->data->calculation->{'Min host IP'};
    $max_host = $subnet_data->data->calculation->{'Max host IP'};
}

// -----------------------------------------------------------------------------

function get_hosts()
{   
    global $url, $token, $subnetid, $subnet, $data;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "subnets/" . $subnetid ."/addresses/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $hosts = json_decode($server_output);
        
    if( $hosts->success == false ){
        printf(">>> ERROR: Unable to get hosts for %s\n\n",$subnet);
        var_dump($hosts); 
        exit(1);
    }   
       
    foreach($hosts->data as $host){
        $ip = trim($host->ip);
        $id = $host->id;
        $item = [
            'id' => $id,
            'oldname' => $host->hostname,                
            'newname' => '',
            ];
        $data[$ip] = $item;
    }
    
}

// -----------------------------------------------------------------------------

function scan_dns()
{
    global $data, $min_host, $max_host;
    
    $min = explode(".",$min_host)[3];
    $max = explode(".",$max_host)[3];
    
    for($i = $min; $i <= $max; $i++){
        $ip = explode(".",$min_host)[0] . "." . explode(".",$min_host)[1] . "." . explode(".",$min_host)[2] . "." . $i;
        $name = gethostbyaddr($ip);
        if( $name == $ip ) continue;
        
        if( array_key_exists($ip, $data) ){
            $data[$ip]['newname'] = $name;
        } else {
            $item = [
                'id' => 0,
                'oldname' => '',                
                'newname' => $name,
                ];
            $data[$ip] = $item;
        }
    }
    
}

// -----------------------------------------------------------------------------

function update_host($item)
{      
    global $url, $token, $subnet;

    // UPDATE ADDRESS DATA    
    $data = [ 
              "hostname" => $item['newname']
            ];
    $data_string = json_encode($data);
        
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "addresses/" . $item['id'] . "/");
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PATCH");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);
    
    $headers = [
        "token: $token",
        "Content-Type: application/json",
        'Content-Length: ' . strlen($data_string)
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);  
    
    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $server_json = json_decode($server_output);
    
    if( $server_json->success == false ){
        printf(">>> ERROR: Unable to update address %s for %s\n\n",$item['ip'],$subnet);
        var_dump($server_json); 
        exit(1);
    }     
}

// -----------------------------------------------------------------------------

function new_host($subnetid,$ip,$item)
{      
    global $url, $token, $subnet;

    // NEW ADDRESS DATA
    $data = [ "subnetId" => trim($subnetid),
              "ip" => $ip,
              "hostname" => $item['newname'],
              "description" => "only DNS",
              "DHCP" => "NO",
            ];
    $data_string = json_encode($data);
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "addresses/");
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);
    
    $headers = [
        "token: $token",
        "Content-Type: application/json",
        'Content-Length: ' . strlen($data_string)
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);  
    
    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $server_json = json_decode($server_output);    
    
    if( $server_json->success == false ){
        printf(">>> ERROR: Unable to create address %s for %s\n\n",$ip,$subnet);
        var_dump($server_json); 
        exit(1);
    }     
}

// -----------------------------------------------------------------------------

function print_header()
{
          //   11 | 147.251.84.1     | ukb-cp.mgmt.ics.muni.cz   | ukb-cp.mgmt.ics.muni.cz   
          
    printf("\n");          
    printf("ST   Id           IP               IPAM Name                     DNS Name           \n");          
    printf("-- ------ ------------------ --------------------------- ---------------------------\n");
}

// -----------------------------------------------------------------------------

function print_data()
{
    global $data;

    print_header();
    
    foreach($data as $ip => $item){
        printf("%2s % 5d | %-16s | %-25s | %-25s\n",'',$item["id"],$ip,$item["oldname"],$item['newname']);
    }
}

// -----------------------------------------------------------------------------

function update_data()
{
    global $data, $subnetid, $testmode;

    print_header();    
    
    foreach($data as $ip => $item){
        if( ($item["id"] != 0 ) && ($item['newname'] != "") && ($item["oldname"] != $item['newname']) ){
            printf("%2s % 5d | %-16s | %-25s | %-25s\n",'M',$item["id"],$ip,$item["oldname"],$item['newname']);
            if( $testmode  == false ) update_host($item);
        }
    }
    
    foreach($data as $ip => $item){
        if( ($item["id"] == 0 ) && ($item['newname'] != "") ){
            printf("%2s % 5d | %-16s | %-25s | %-25s\n",'+',$item["id"],$ip,$item["oldname"],$item['newname']);
            if( $testmode  == false ) new_host($subnetid,$ip,$item);
        }
    }    
}

// -----------------------------------------------------------------------------

init_session();
get_subnetid();
get_subnetrange();
get_hosts();
scan_dns();
print_data();
update_data();

printf("\n");   

?>
