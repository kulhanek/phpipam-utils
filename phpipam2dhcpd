#!/usr/bin/env php
<?php
// -----------------------------------------------------------------------------
// Usage: $ ./phpipam2dhcp <subnet>
//
// Example:
//        $ ./phpipam2dhcp 147.251.90.0/24
// -----------------------------------------------------------------------------

printf("\n");

// subnet is the first argument
if( count($argv) != 2 ){
    printf(">>> ERROR: Subnet not specified!\n\n");
    exit(1);
}

$subnet = $argv[1];
if( $subnet == "" ) {
    printf(">>> ERROR: Subnet not specified!\n\n");
    exit(1);
}

printf("SubNet: %s\n",$subnet);

// access to phpIPAM api
include 'phpipam.conf';

// -----------------------------------------------------------------------------

$subnetid = 0;
$data = [];
$token = "";
$hosts = "";
$subnet_data = "";
$dhcp_classes = [];
$locationsdb = [];

// -----------------------------------------------------------------------------

function init_session()
{   
    global $url, $username, $passwd, $token;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "user/");
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_USERPWD, "$username:$passwd");
    curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $json = json_decode($server_output);
    
    $token = $json->data->token;
    
    //printf("Session token: %s\n",$token);
}

// -----------------------------------------------------------------------------

function get_subnetid()
{   
    global $url, $token, $subnetid, $subnet;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "subnets/cidr/" . $subnet ."/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $subnet_data = json_decode($server_output);
    
    if( $subnet_data->success == false ){
        printf(">>> ERROR: Unable to get subnet id for %s\n\n",$subnet);
        var_dump($subnet_data); 
        exit(1);
    }   
        
    $subnetid = $subnet_data->data[0]->id;
}

// -----------------------------------------------------------------------------

function get_subnet()
{   
    global $url, $token, $subnetid, $subnet, $subnet_data;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "subnets/" . $subnetid ."/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $subnet_data = json_decode($server_output);
        
    if( $subnet_data->success == false ){
        printf(">>> ERROR: Unable to get hosts for %s\n\n",$subnet);
        var_dump($subnet_data); 
        exit(1);
    } 
}

// -----------------------------------------------------------------------------

function get_hosts()
{   
    global $url, $token, $subnetid, $subnet, $hosts;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "subnets/" . $subnetid ."/addresses/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $hosts = json_decode($server_output);
        
    if( $hosts->success == false ){
        printf(">>> ERROR: Unable to get hosts for %s\n\n",$subnet);
        var_dump($hosts); 
        exit(1);
    } 
}

// -----------------------------------------------------------------------------

function get_location_name($id)
{   
    global $url, $token, $subnet, $locationsdb;

    // is it in cache?
    if( array_key_exists($id, $locationsdb) == true ){
        return($locationsdb[$id]);
    }
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url . "tools/locations/" . $id . "/");
    curl_setopt($ch, CURLOPT_HTTPGET, true);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    $headers = [
        "token: $token"
    ];
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    

    $server_output = curl_exec ($ch);
    
    if( $server_output == FALSE ){
        printf(">>> ERROR: Unable to connect to IPAM: %s\n\n",curl_error($ch));
        curl_close ($ch);
        exit(1);
    }    

    curl_close ($ch);
    
    $loc_data = json_decode($server_output);
        
    if( $loc_data->success == false ){
        printf(">>> ERROR: Unable to get hosts for %s\n\n",$subnet);
        var_dump($loc_data); 
        exit(1);
    } 
    
    $name = $loc_data->data->name;
    $locationsdb[$id] = $name;
    return($name);
}



// -----------------------------------------------------------------------------

function print_header()
{          
    printf("\n");          
    printf("ST   Id           IP               HostName                      MAC               DHCP Class   \n");          
    printf("-- ------ ------------------ --------------------------- ------------------- -------------------\n");
}

// -----------------------------------------------------------------------------

function print_data()
{
    global $hosts, $dhcp_classes;

    print_header();
    
    foreach($hosts->data as $item){
        if( ( $item->ip != "" ) && ( $item->hostname != "" ) && ( $item->mac != "" ) && ( $item->DHCP != "NO" ) ){
            printf("%2s % 5d | %-16s | %-25s | %17s | %17s\n",'',$item->id,$item->ip,$item->hostname,$item->mac,$item->DHCP);
            $dhcp_classes[$item->DHCP] = $item->DHCP;
        }
    }
    
    printf("\n");  
    printf("Number of DHCP groups: %d\n",count($dhcp_classes));
}

// -----------------------------------------------------------------------------

function generate_header($fh)
{
    global $url, $subnet_data, $subnet, $admin;
    
    fprintf($fh,"# -----------------------------------------------------------------------------\n");
    fprintf($fh,"# GENERATED BY phpipam2dhcpd - DO NOT EDIT\n");
    fprintf($fh,"# -----------------------------------------------------------------------------\n"); 
    fprintf($fh,"# data source: %s\n",$url);    
    fprintf($fh,"# date       : %s\n",date("Y-m-d H:i:s"));  
    fprintf($fh,"# admin      : %s\n",$admin);
    fprintf($fh,"# -----------------------------------------------------------------------------\n");    
    fprintf($fh,"\n");
    fprintf($fh,"# subnet: %s\n",$subnet);
    fprintf($fh,"# -----------------------------------------------------------------------------\n");      
    fprintf($fh,"\n");
    fprintf($fh,"subnet %s netmask %s {\n",$subnet_data->data->calculation->{'Network'},$subnet_data->data->calculation->{'Subnet netmask'});
    
    fprintf($fh,"   default-lease-time  14400;\n");
    fprintf($fh,"   max-lease-time      28800;\n");
    fprintf($fh,"\n");    
    fprintf($fh,"   option routers             %s;\n",$subnet_data->data->calculation->{'Min host IP'});
    fprintf($fh,"   option subnet-mask         %s;\n",$subnet_data->data->calculation->{'Subnet netmask'});    
    fprintf($fh,"   option domain-name-servers 147.251.4.33 , 147.251.6.10;\n");
    fprintf($fh,"   option domain-name         \"ncbr.muni.cz\";\n");
    fprintf($fh,"}\n");   
}

// -----------------------------------------------------------------------------

function generate_group_specific($fh,$gname)
{
    if( $gname == "HWMON" ){
        fprintf($fh,"\n");    
        fprintf($fh,"   allow  bootp;\n"); 
        fprintf($fh,"\n");
        fprintf($fh,"   if exists user-class and option user-class = \"iPXE\" {\n");
        fprintf($fh,"       filename \"bootstrap.ipxe\";\n");
        fprintf($fh,"   } else {\n");
        fprintf($fh,"       filename \"undionly.kpxe\";\n");
        fprintf($fh,"   }\n");
        fprintf($fh,"   next-server 147.251.84.15;\n");       
        return;
    }
    
    if( $gname == "PUPPET" ){
        fprintf($fh,"\n");    
        fprintf($fh,"    allow  bootp;\n"); 
        fprintf($fh,"\n");
        fprintf($fh,"   if exists user-class and option user-class = \"iPXE\" {\n");
        fprintf($fh,"       filename \"bootstrap.ipxe\";\n");
        fprintf($fh,"   } else {\n");
        fprintf($fh,"       filename \"undionly.kpxe\";\n");
        fprintf($fh,"   }\n");
        fprintf($fh,"   next-server 147.251.84.53;\n"); 
        return;
    } 
    
    if( $gname == "PLAIN" ){
        // nothing to be here
        return;
    }
}

// -----------------------------------------------------------------------------

function generate_group($fh,$gname)
{
    global $hosts;

    fprintf($fh,"\n");
    fprintf($fh,"# DHCP group: %s\n",$gname);
    fprintf($fh,"# -----------------------------------------------------------------------------\n");  
    fprintf($fh,"group {\n");
    
    generate_group_specific($fh,$gname);
        
    foreach($hosts->data as $item){
        if( ( $item->ip == "" ) || ( $item->hostname == "" ) || ( $item->mac == "" ) || ( $item->DHCP != $gname ) ) continue;
        fprintf($fh,"\n");        
        fprintf($fh,"# --\n");
        fprintf($fh,"   # Admin   : %s\n",$item->Admin);
        if( $item->owner != "" ){
        fprintf($fh,"   # Owner   : %s\n",$item->owner); 
        }
        fprintf($fh,"   # Group   : %s\n",$item->Group);
        if( $item->Cluster != "" ){        
        fprintf($fh,"   # Cluster : %s\n",$item->Cluster);
        }
        if( $item->location > 0 ){
        fprintf($fh,"   # Location: %s\n",get_location_name($item->location));
        }
        fprintf($fh,"   host %s {\n",$item->hostname);
        fprintf($fh,"       hardware ethernet %s;\n",$item->mac);
        fprintf($fh,"       fixed-address %s;\n",$item->ip );
        fprintf($fh,"       option host-name \"%s\";\n",explode(".",$item->hostname)[0]);
        fprintf($fh,"   }\n");
    }
    
    fprintf($fh,"}\n");
    fprintf($fh,"\n");   
}

// -----------------------------------------------------------------------------

init_session();
get_subnetid();
get_subnet();
get_hosts();
print_data();

$subnet_items = explode("/", $subnet);
$dhcp_conf = $subnet_items[0] . ".conf";

$fh = fopen($dhcp_conf,"w");
if( $fh == false ){
    printf(">>> ERROR: Unable to open %s for writing!\n\n",$dhcp_conf);
    exit(1);
}

generate_header($fh);
foreach($dhcp_classes as $gname){
    generate_group($fh,$gname);
}

fclose($fh);

printf("\n");   

?>
