#!/usr/bin/env php
<?php
// -----------------------------------------------------------------------------
// Usage: $ ./phpipam2dhcp [--no-vlan] <subnet>
//
// Example:
//        $ ./phpipam2dhcp 147.251.90.0/24
//
// Output file:
//        147.251.90.0.conf
// -----------------------------------------------------------------------------

printf("\n");

$no_vlan = false;
$arg_start = 1;
$nargs = $argc;

if( $nargs > 1 ){
    if( $argv[1] == "--no-vlan" ){
        $arg_start=2;
        $nargs--;
        $no_vlan = true;
    }
}

// subnet is the first argument
if( $nargs < 2 ){
    printf(">>> ERROR: Subnet not specified!\n\n");
    exit(1);
}

$subnet = $argv[$arg_start];
if( $subnet == "" ) {
    printf(">>> ERROR: Subnet not specified!\n\n");
    exit(1);
}

printf("SubNet: %s\n",$subnet);

// access to phpIPAM api
include 'phpipam.conf';

// -----------------------------------------------------------------------------

require_once(__DIR__ . '/extras/lib.php');


// -----------------------------------------------------------------------------

function print_header()
{          
    printf("\n");          
    printf("ST   Id           IP               HostName                      MAC               DHCP Class   \n");          
    printf("-- ------ ------------------ --------------------------- ------------------- -------------------\n");
}

// -----------------------------------------------------------------------------

function print_data()
{
    global $hosts, $dhcp_classes;
    global $subnet_data;

    print_header();
    
    foreach($hosts->data as $item){
        if( ( $item->ip != "" ) && ( $item->hostname != "" ) && ( $item->mac != "" ) && ( $item->custom_DHCP != "NO" ) && ( $item->custom_DHCP != "POOL" ) ){
            $hostname = trim($item->hostname);
            if ( strpos($hostname, ".") == false ){
                $hostname = $hostname . "." . $subnet_data->data->custom_Domain;
            }
            printf("%2s % 5d | %-16s | %-25s | %17s | %17s\n",'',$item->id,$item->ip,$hostname,$item->mac,$item->custom_DHCP);
            $dhcp_classes[$item->custom_DHCP] = $item->custom_DHCP;
        }
    }
    
    printf("\n");  
    printf("Number of DHCP groups: %d\n",count($dhcp_classes));
}

// -----------------------------------------------------------------------------

function generate_header($fh)
{
    global $url, $subnet_data, $subnet, $vlan_data, $no_vlan;
    
    fprintf($fh,"# -----------------------------------------------------------------------------\n");
    fprintf($fh,"# GENERATED BY phpipam2dhcpd - DO NOT EDIT\n");
    fprintf($fh,"# -----------------------------------------------------------------------------\n"); 
    fprintf($fh,"# data source: %s\n",$url);    
    fprintf($fh,"# date       : %s\n",date("Y-m-d H:i:s"));  
    fprintf($fh,"# admin      : %s\n",$subnet_data->data->custom_Admin);
    fprintf($fh,"# tech admin : %s\n",$subnet_data->data->custom_TechAdmin);
    if( $subnet_data->data->custom_NSAdmin != "" ){
    fprintf($fh,"# dns admin  : %s\n",$subnet_data->data->custom_NSAdmin);
    }
    if( $subnet_data->data->custom_DHCPAdmin != "" ){
    fprintf($fh,"# dhcp admin : %s\n",$subnet_data->data->custom_DHCPAdmin);
    }
    fprintf($fh,"# sec-alerts : %s\n",$subnet_data->data->custom_SecAlerts);
    fprintf($fh,"# -----------------------------------------------------------------------------\n");    
    fprintf($fh,"\n");
    fprintf($fh,"# subnet: %s\n",$subnet);
    if( $no_vlan == false ){
    fprintf($fh,"# vlan  : %d (%s)\n",$vlan_data->data->number, $vlan_data->data->name);
    }
    fprintf($fh,"# -----------------------------------------------------------------------------\n");      
    fprintf($fh,"\n");
    fprintf($fh,"subnet %s netmask %s {\n",$subnet_data->data->calculation->{'Network'},$subnet_data->data->calculation->{'Subnet netmask'});
    
    // detect DHCP pool
    global $hosts;
   
    $first = true;
    $pool = [];
    foreach($hosts->data as $item){
        if( ( $item->ip != "" ) && ( $item->mac == "" ) && ( $item->custom_DHCP == "POOL" ) ){
            $pool[] = $item->ip;
            $dp = explode(".",$item->ip);
            $num = 0;
            if( count($dp) == 4 ){
                $num = $dp[3];
            }
            if( $num != 0 ){
                if( $first == true ){
                    $prev = $num;
                } else if( $prev + 1 != $num ){
                    printf(">>> ERROR: Discontinuous pool!\n\n");
                    exit(1); 
                }
            }
        }
    }


    fprintf($fh,"   default-lease-time         14400;\n");
    fprintf($fh,"   max-lease-time             28800;\n");
    if( count($pool) == 0 ){
    fprintf($fh,"   deny                       unknown-clients;\n");
    }
    fprintf($fh,"   deny                       bootp;\n");

    fprintf($fh,"\n");
    fprintf($fh,"   option routers             %s;\n",$subnet_data->data->calculation->{'Min host IP'});
    fprintf($fh,"   option subnet-mask         %s;\n",$subnet_data->data->calculation->{'Subnet netmask'});
    $namesrvs = str_replace(";",",",$subnet_data->data->nameservers->namesrv1);
    fprintf($fh,"   option domain-name-servers %s;\n",$namesrvs);
    fprintf($fh,"   option domain-name         \"%s\";\n",$subnet_data->data->custom_Domain);


    if( count($pool) > 0 ){
    fprintf($fh,"\n");
    fprintf($fh,"   # DHCP pool\n");
    fprintf($fh,"   pool {\n");
    fprintf($fh,"      range %s %s;\n",$pool[0],$pool[count($pool)-1]);
    fprintf($fh,"      allow unknown-clients;\n");
    fprintf($fh,"   }\n");
    }
    
    fprintf($fh,"}\n");   
}

// -----------------------------------------------------------------------------

function generate_group_specific($fh,$gname)
{
    
    if( $gname == "PUPPET" ){
        fprintf($fh,"\n");    
        fprintf($fh,"   allow  bootp;\n"); 
        fprintf($fh,"\n");
        fprintf($fh,"   if exists user-class and option user-class = \"iPXE\" {\n");
        fprintf($fh,"       filename \"bootstrap.ipxe\";\n");
        fprintf($fh,"   } else {\n");
        fprintf($fh,"       filename \"undionly.kpxe\";\n");
        fprintf($fh,"   }\n");
        fprintf($fh,"   next-server 147.251.84.53;   # puppet.ncbr.muni.cz\n"); 
        return;
    } 
    
    if( $gname == "PLAIN" ){
        // nothing to be here
        return;
    }
}

// -----------------------------------------------------------------------------

function generate_group($fh,$gname)
{
    global $hosts;
    global $subnet_data;

    fprintf($fh,"\n");
    fprintf($fh,"# DHCP group: %s\n",$gname);
    fprintf($fh,"# -----------------------------------------------------------------------------\n");  
    fprintf($fh,"group {\n");
    
    generate_group_specific($fh,$gname);
        
    foreach($hosts->data as $item){
        if( ( $item->ip == "" ) || ( $item->hostname == "" ) || ( $item->mac == "" ) || ( $item->custom_DHCP != $gname ) ) continue;
        fprintf($fh,"\n");        
        fprintf($fh,"# -----\n");
        $hostname = trim($item->hostname);
        if ( strpos($hostname, ".") == false ){
            $hostname = $hostname . "." . $subnet_data->data->custom_Domain;
        }
        fprintf($fh,"   host %s {\n",$hostname);
        fprintf($fh,"       hardware ethernet %s;\n",$item->mac);
        fprintf($fh,"       fixed-address     %s;\n",$item->ip );
        fprintf($fh,"       option host-name  \"%s\";\n",explode(".",$item->hostname)[0]);
        if( $item->location > 0 ){
        fprintf($fh,"       # Location:       %s\n",get_location_name($item->location));
        }
        if( $item->port != "" ){
        fprintf($fh,"       # Plug/port:      %s\n",$item->port);
        }
        if( $item->deviceId != 0 ){
            $devstr = get_device_name($item->deviceId);
        fprintf($fh,"       # Device:         %s\n",$devstr);
        }
        if( ($item->custom_Admin != "User") && ($item->custom_Admin != "") ){
        fprintf($fh,"       # Admin:          %s\n",$item->custom_Admin);
        if( $item->custom_User != "" ){
        fprintf($fh,"       # User:           %s\n",$item->custom_User);
        }
        } else {
        if( $item->custom_User != "" ){
        fprintf($fh,"       # User and admin: %s\n",$item->custom_User);
        }
        }
        fprintf($fh,"       # Group:          %s\n",$item->custom_Group);
        if( $item->custom_Cluster != "" ){
        fprintf($fh,"       # Cluster:        %s\n",$item->custom_Cluster);
        }
        if( $item->custom_OS != "" ){
        fprintf($fh,"       # OS:             %s\n",$item->custom_OS);
        }
        if( $item->custom_AssetNo != "" ){
        fprintf($fh,"       # Asset number    %s\n",$item->custom_AssetNo);
        }

        fprintf($fh,"   }\n");
    }
    
    fprintf($fh,"}\n");
    fprintf($fh,"\n");   
}

// -----------------------------------------------------------------------------

init_session();
get_subnetid();
get_subnet();
if( $no_vlan == false ){
    get_vlan();
}
get_hosts();
print_data();

$subnet_items = explode("/", $subnet);
$dhcp_conf = $subnet_items[0] . ".conf";

printf("\n"); 
printf("Generating DHCPD configuration: %s\n",$dhcp_conf);

$fh = fopen($dhcp_conf,"w");
if( $fh == false ){
    printf(">>> ERROR: Unable to open %s for writing!\n\n",$dhcp_conf);
    exit(1);
}

generate_header($fh);
foreach($dhcp_classes as $gname){
    generate_group($fh,$gname);
}

fclose($fh);

printf("Done!\n");
printf("\n");   

?>
